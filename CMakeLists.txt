cmake_minimum_required(VERSION 2.8)
cmake_policy(SET CMP0028 NEW)

PROJECT(SimPla CXX C)
INCLUDE(local_conf.cmake)
INCLUDE(${PROJECT_SOURCE_DIR}/CMake/utils.cmake)
SET(CMAKE_VERBOSE_MAKEFILE ON)
SET(PREFIX ${CMAKE_CXX_COMPILER_ID}-${CMAKE_BUILD_TYPE})
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake ${CMAKE_MODULE_PATH})
MESSAGE(STATUS "Using C++ Compiler ${CMAKE_CXX_COMPILER_ID} ")
if (NOT STD_CXX)
    SET(STD_CXX "c++14")
endif (NOT STD_CXX)

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    SET(CMAKE_CXX_FLAGS "-std=${STD_CXX} -fcolor-diagnostics -ftemplate-backtrace-limit=0  -fPIC -funroll-loops  -fno-limit-debug-info ")
    SET(CMAKE_Fortran_COMPILER gfortran)
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
    SET(CMAKE_CXX_FLAGS "-std=${STD_CXX} -fPIC   ")
else ()
    SET(CMAKE_CXX_FLAGS "-std=${STD_CXX} -fPIC   ")
endif ()

INCLUDE(CTest)
ENABLE_TESTING()
FIND_PACKAGE(GTest)
ADD_CUSTOM_TARGET(alltest)

SET(BUILD_SHARED_LIBS OFF)


FIND_PACKAGE(Boost REQUIRED)

FIND_PACKAGE(OpenMP REQUIRED)

IF (OPENMP_FOUND)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OpenMP_Fortran_FLAGS}")
ENDIF (OPENMP_FOUND)

FIND_PACKAGE(MPI REQUIRED)
IF (MPI_FOUND)
    INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
    ADD_DEFINITIONS(-DOMPI_SKIP_MPICXX)


    SET(SKIP_MPICXX "OMPI_SKIP_MPICXX")
ENDIF (MPI_FOUND)


FIND_PACKAGE(TBB)
IF (TBB_FOUND)
    INCLUDE_DIRECTORIES(${TBB_INCLUDE_DIRS})
    SET(HAVE_TBB 1)
ENDIF (TBB_FOUND)

SET(HDF5_PREFER_PARALLEL ON)
SET(HDF5_USE_STATIC_LIBRARIES OFF)
FIND_PACKAGE(HDF5 1.8 COMPONENTS C HL REQUIRED)
IF (HDF5_FOUND)
    INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})
    SET(HAVE_HDF5 ON)
ENDIF (HDF5_FOUND)

FIND_PACKAGE(Lua 5.3 REQUIRED)
IF (LUA_FOUND)
    INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIR})
    MESSAGE(STATUS "Lua version: ${LUA_VERSION_STRING} ")
ENDIF (LUA_FOUND)


if (NOT IS_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/simpla)
    FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/simpla)
endif (NOT IS_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/simpla)


CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/include/SIMPLA_config.h.in
        ${CMAKE_CURRENT_BINARY_DIR}/include/simpla/SIMPLA_config.h @ONLY)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/include/)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/src)


# workaround for CLion 1.0.x
FILE(GLOB_RECURSE clion_all_headers ${CMAKE_SOURCE_DIR}/*.h)
add_executable(all_clion ${clion_all_headers} src/dummy.h src/dummy.cpp example/mhd_test/HyperbolicConservationLaw.h src/simpla/third_part/SAMRAITimeIntegrator.cpp src/simpla/third_part/SAMRAITimeIntegrator.h)



add_subdirectory(src/simpla)
add_subdirectory(test)
add_subdirectory(docs)
#add_subdirectory(sp_lite)

add_subdirectory(example)
