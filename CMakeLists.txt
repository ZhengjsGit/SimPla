cmake_minimum_required(VERSION 2.8)
cmake_policy(SET CMP0028 NEW)

PROJECT(SimPla CXX C)

INCLUDE(${PROJECT_SOURCE_DIR}/CMake/utils.cmake)

SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(BUILD_SHARED_LIBS OFF)

SET(PREFIX ${CMAKE_CXX_COMPILER_ID}-${CMAKE_BUILD_TYPE})

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake ${CMAKE_MODULE_PATH})

SET(ARCH intel64)

MESSAGE(STATUS "Using C++ Compiler ${CMAKE_CXX_COMPILER_ID} ")

SET(COMPILER $ENV{PRG_ENV})

SET(CMAKE_C_FLAGS "-std=c11 -fopenmp  ")
SET(CMAKE_CXX_FLAGS "-std=c11 -fopenmp  ")

SET(SIMPLA_VERSION_MAJOR 0)
SET(SIMPLA_VERSION_MINOR 0)
SET(IMPLA_VERSION_PATCHLEVEL 0)

SET(AUTHOR " YU Zhi <yuzhi@ipp.ac.cn> ")
SET(COPYRIGHT "All rights reserved. (2016 )")

execute_process(COMMAND git describe --all --dirty --long
        OUTPUT_VARIABLE SIMPLA_VERSION_IDENTIFY
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
        OUTPUT_STRIP_TRAILING_WHITESPACE
        )
if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    SET(CMAKE_CXX_FLAGS "-std=c++11  -fcolor-diagnostics   -ftemplate-backtrace-limit=0  -fPIC ")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
    SET(CMAKE_CXX_FLAGS "-std=c++11 -fopenmp -fPIC ")
else ()
    SET(CMAKE_CXX_FLAGS "-std=c++11 -fopenmp  -fPIC  ")
endif ()

FIND_PACKAGE(Boost)

FIND_PACKAGE(MPI)
IF (MPI_FOUND)
    INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
    ADD_DEFINITIONS(-DOMPI_SKIP_MPICXX)
    SET(SKIP_MPICXX "OMPI_SKIP_MPICXX")
ENDIF (MPI_FOUND)

FIND_PACKAGE(TBB)
IF (TBB_FOUND)
    INCLUDE_DIRECTORIES(${TBB_INCLUDE_DIRS})
    SET(HAVE_TBB 1)
ENDIF (TBB_FOUND)

SET(HDF5_PREFER_PARALLEL ON)
SET(HDF5_USE_STATIC_LIBRARIES OFF)

FIND_PACKAGE(HDF5 1.8 COMPONENTS C HL)
IF (HDF5_FOUND)
    INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})
ENDIF (HDF5_FOUND)
#LINK_DIRECTORIES("/usr/lib/x86_64-linux-gnu/hdf5/openmpi/lib")

FIND_PACKAGE(BLAS)

FIND_PACKAGE(LAPACK)

FIND_PACKAGE(Lua 5.2 REQUIRED)

SET(SP_REAL float)

SET(SIMPLA_MAXIMUM_DIMENSION 3)

SET(MAX_NUM_OF_DIMS 10)

SET(SIMPLA_INCLUDE_DIR ${CMAKE_CURRENT_BINARY_DIR}/include/simpla)

if (NOT IS_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/simpla)
    FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/simpla)
endif (NOT IS_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/simpla)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/include/SIMPLA_config.h.in
        ${CMAKE_CURRENT_BINARY_DIR}/include/simpla/SIMPLA_config.h @ONLY)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/include/simpla/)

INCLUDE(CTest)
ENABLE_TESTING()
FIND_PACKAGE(GTest)
ADD_CUSTOM_TARGET(alltest)

INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${HDF5_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${LUA_INCLUDE_DIR})

add_subdirectory(external_project)

add_subdirectory(src)
add_subdirectory(example)
add_subdirectory(tools)
add_subdirectory(docs)

add_subdirectory(scenario)
add_subdirectory(sp_lite)

# workaround for CLion 1.0.x
FILE(GLOB_RECURSE clion_all_headers ${CMAKE_SOURCE_DIR}/*.h)
add_executable(all_clion ${clion_all_headers} src/dummy.h src/dummy.cpp tools/geqdsk_convert.cpp)
