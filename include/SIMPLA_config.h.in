#ifndef SIMPLA_CONFIG_H
#define SIMPLA_CONFIG_H

#define SIMPLA_VERSION_MAJOR @SIMPLA_VERSION_MAJOR@
#define SIMPLA_VERSION_MINOR @SIMPLA_VERSION_MAJOR@
#define SIMPLA_VERSION_PATCHLEVEL @SIMPLA_VERSION_PATCHLEVEL@
#define SIMPLA_VERSION_PATCHLEVEL @SIMPLA_VERSION_PATCHLEVEL@
#define SIMPLA_VERSION_IDENTIFY "@SIMPLA_VERSION_IDENTIFY@"

#define AUTHOR "@AUTHOR@"
#define COPYRIGHT "@COPYRIGHT@"

/* Optimized build */
#cmakedefine OPT_BUILD

/* Thread Building Blocks are available to use */
#cmakedefine TBB_FOUND

/* BOOST headers are available to use */
#cmakedefine BOOST_FOUND

/* BOOST headers are available to use */
#cmakedefine HAVE_BOOST_HEADERS

#cmakedefine MPI_FOUND

#cmakedefine SKIP_MPICXX

#cmakedefine CUDA_FOUND

/* HDF5 library is available so use it */
#cmakedefine HDF5_FOUND

#cmakedefine LUA_FOUND
/* BLAS library is available so use it */
#cmakedefine BLAS_FOUND

#cmakedefine LAPACK_FOUND

#cmakedefine PETSC_FOUND

#cmakedefine SAMRAI_FOUND

#cmakedefine SIMPLA_MAXIMUM_DIMENSION @SIMPLA_MAXIMUM_DIMENSION@

#cmakedefine SP_ARRAY_MAX_NDIMS @SP_ARRAY_MAX_NDIMS@

#ifndef SP_ARRAY_MAX_NDIMS
#define SP_ARRAY_MAX_NDIMS 8
#endif

/* SLOW_FIRST: c-array  , FAST_FIRST: fortran-array slow-fist*/
#cmakedefine SP_ARRAY_DEFAULT_ORDER @SP_ARRAY_DEFAULT_ORDER@

#ifndef SP_ARRAY_DEFAULT_ORDER
#define SP_ARRAY_DEFAULT_ORDER SLOW_FIRST
#endif
#cmakedefine SP_DEFAULT_SPACE_DIMS @SP_DEFAULT_SPACE_DIMS@
#ifndef SP_DEFAULT_SPACE_DIMS
#define SP_DEFAULT_SPACE_DIMS 3
#endif

/* SNaN: signaling nan,QNAN: quiet nan ,DENORM_MIN: 2^-1074*/
#cmakedefine SP_ARRAY_INITIALIZE_VALUE @SP_ARRAY_INITIALIZE_VALUE@

#cmakedefine SP_GEO_DEFAULT_TOLERANCE @SP_GEO_DEFAULT_TOLERANCE@
#ifndef SP_GEO_DEFAULT_TOLERANCE
#define SP_GEO_DEFAULT_TOLERANCE 1.0e-6
#endif

#cmakedefine SP_OUTPUT_SUFFIX "@SIMPLA_OUTPUT_SUFFIX@"

#ifndef SP_OUTPUT_SUFFIX
#define SP_OUTPUT_SUFFIX SIMPLA
#endif

#include <stdint.h>
#include <stdlib.h>

#cmakedefine SP_REAL @SP_REAL@
#ifndef SP_REAL
#define SP_REAL double
#endif

typedef SP_REAL Real;

#define SP_TRUE 1
#define SP_FALSE 0
#define SP_SUCCESS 0
#define SP_FAILED 1

#define SP_DO_NOTHING 0xFFFF

#define SP_UNIMPLEMENTED SP_DO_NOTHING + 1

typedef size_t size_type;
typedef int8_t byte_type;  // int8_t
typedef int Integral;
typedef int64_t index_type;
typedef unsigned int uint;
typedef size_type id_type;

#define SP_SUCCESS 0
#define SP_FAILED 1

#ifdef __cplusplus

#include <limits>

namespace simpla {
static constexpr Real SP_INFINITY = std::numeric_limits<Real>::infinity();
static constexpr Real SP_EPSILON = std::numeric_limits<Real>::epsilon();
static constexpr Real SP_SNaN = std::numeric_limits<Real>::signaling_NaN();
}
#endif  //__cplusplus

#endif  // SIMPLA_CONFIG_H
