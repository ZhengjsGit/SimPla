cmake_minimum_required(VERSION 2.8)
cmake_policy(SET CMP0028 NEW)
cmake_policy(SET CMP0021 OLD)

PROJECT(SAMRAI CXX C)
SET(CMAKE_VERBOSE_MAKEFILE ON)
SET(PREFIX ${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}-${CMAKE_BUILD_TYPE})
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMake ${CMAKE_MODULE_PATH})
MESSAGE(STATUS "Using C++ Compiler ${CMAKE_CXX_COMPILER_ID} ")


FIND_PACKAGE(Boost REQUIRED)
IF (Boost_FOUND)
    ADD_DEFINITIONS(-DOMPI_SKIP_MPICXX)
    SET(HAVE_BOOST ON)
    SET(HAVE_BOOST_HEADERS ON)
    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
ENDIF (Boost_FOUND)

FIND_PACKAGE(OpenMP REQUIRED)
IF (OpenMP_FOUND)
    SET(HAVE_OPENMP on)
ENDIF (OpenMP_FOUND)

FIND_PACKAGE(MPI REQUIRED)
IF (MPI_FOUND)
    ADD_DEFINITIONS(-DOMPI_SKIP_MPICXX)
    SET(HAVE_MPI ON)
    INCLUDE_DIRECTORIES(${MPI_C_INCLUDE_PATH})
ENDIF (MPI_FOUND)

FIND_PACKAGE(CUDA)
IF (CUDA_FOUND)
    SET(HAVE_CUDA ON)
ENDIF (CUDA_FOUND)

#SET(TBB_ROOT /pkg/tbb/20170604/)
#FIND_PACKAGE(TBB)
#IF (TBB_FOUND)
#    SET(HAVE_TBB ON)
#ENDIF (TBB_FOUND)

SET(HDF5_PREFER_PARALLEL OFF)
SET(HDF5_USE_STATIC_LIBRARIES OFF)
FIND_PACKAGE(HDF5 1.8 COMPONENTS C HL REQUIRED)
IF (HDF5_FOUND)
    SET(HAVE_HDF5 ON)
    INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR})
ENDIF (HDF5_FOUND)

FIND_PACKAGE(BLAS)
IF (BLAS_FOUND)
    SET(HAVE_BLAS on)
ENDIF (BLAS_FOUND)

file(READ ${CMAKE_CURRENT_SOURCE_DIR}/config/SAMRAI_config.h.in TMP_CONFIG)
string(REPLACE "#undef SAMRAI_F77_FUNC_" "#define SAMRAI_F77_FUNC_(name,NAME) name ## _" TMP_CONFIG "${TMP_CONFIG}")
string(REGEX REPLACE "#undef SAMRAI_F77_FUNC" "#define SAMRAI_F77_FUNC(name,NAME) name ## _" TMP_CONFIG "${TMP_CONFIG}")
string(REPLACE "#undef IOMANIP_HEADER_FILE" "#undef IOMANIP_HEADER_FILE @IOMANIP_HEADER_FILE@" TMP_CONFIG "${TMP_CONFIG}")
string(REPLACE "#undef IOSTREAM_HEADER_FILE" "#undef IOSTREAM_HEADER_FILE @IOSTREAM_HEADER_FILE@" TMP_CONFIG "${TMP_CONFIG}")
string(REPLACE "#undef STL_SSTREAM_HEADER_FILE" "#undef STL_SSTREAM_HEADER_FILE @STL_SSTREAM_HEADER_FILE@" TMP_CONFIG "${TMP_CONFIG}")
string(REPLACE "#undef SAMRAI_MAXIMUM_DIMENSION" "#undef SAMRAI_MAXIMUM_DIMENSION @SAMRAI_MAXIMUM_DIMENSION@" TMP_CONFIG "${TMP_CONFIG}")
string(REPLACE "#undef" "#cmakedefine" TMP_CONFIG "${TMP_CONFIG}")


string(REPLACE "MAX_DIM_VAL = SAMRAI_MAXIMUM_DIMENSION" "MAX_DIM_VAL = SAMRAI_MAXIMUM_DIMENSION\;" TMP_CONFIG "${TMP_CONFIG}")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/SAMRAI_config.h.in ${TMP_CONFIG})


SET(ENABLE_SAMRAI_TIMERS ON)
SET(SAMRAI_MAXIMUM_DIMENSION 3)
SET(SAMRAI_F77_FUNC_ "(name,NAME) name ## _")
#SET(LACKS_STRSTREAM ON)
SET(IOMANIP_HEADER_FILE "<iomanip>")
SET(IOSTREAM_HEADER_FILE "<iostream>")
SET(STL_SSTREAM_HEADER_FILE "<sstream>")

include(CheckIncludeFileCXX)
include(CheckCXXSourceCompiles)
include(CheckCXXSymbolExists)
CHECK_INCLUDE_FILE_CXX(cmath HAVE_CMATH)
CHECK_INCLUDE_FILE_CXX(ctime HAVE_CTIME)
CHECK_INCLUDE_FILE_CXX(sstream HAVE_SSTREAM)



CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/times.h HAVE_SYS_TIMES_H)
CHECK_INCLUDE_FILE(unistd.h  HAVE_UNISTD_H )
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)

check_symbol_exists(mallinfo malloc.h HAVE_MALLINFO)


check_symbol_exists(DBL_MAX float.h HAVE_DBL_MAX)
IF (NOT HAVE_DBL_MAX)
    SET(DBL_MAX_IS_BROKEN on)
ENDIF (NOT HAVE_DBL_MAX)

check_symbol_exists(DBL_SNAN float.h HAVE_DBL_SNAN)
IF (NOT HAVE_DBL_SNAN)
    SET(DBL_SNAN_IS_BROKEN on)
ENDIF (NOT HAVE_DBL_SNAN)

check_symbol_exists(FLT_MAX float.h HAVE_FLT_MAX)
IF (NOT HAVE_FLT_MAX)
    SET(FLT_MAX_IS_BROKEN on)
ENDIF (NOT HAVE_FLT_MAX)

check_symbol_exists(FLT_SNAN float.h HAVE_FLT_SNAN)
IF (NOT HAVE_FLT_SNAN)
    SET(FLT_SNAN_IS_BROKEN on)
ENDIF (NOT HAVE_FLT_SNAN)

check_cxx_symbol_exists(isnan cmath HAVE_CMATH_ISNAN)

CHECK_CXX_SOURCE_COMPILES(
        "#include <sstream>
        int main(){
         using namespace std;
         ostringstream oss; oss << 10;
        }"
          HAVE_OSTRINGSTREAM)
 IF(NOT HAVE_OSTRINGSTREAM)
    SET(OSTRINGSTREAM_TYPE_IS_BROKEN on)
ENDIF(NOT HAVE_OSTRINGSTREAM)

#CHECK_CXX_SOURCE_COMPILES(
#        "#include <strstream>
#        int main(){
#         using namespace std;
#         ostrstream oss; oss << 10;
#        }"
#        HAVE_OSTRSTREAM)
#check_cxx_symbol_exists(std::ostrstream  strstream HAVE_OSTRSTREAM)
#IF(NOT HAVE_OSTRSTREAM)
    SET(OSTRSTREAM_TYPE_IS_BROKEN on)
#ENDIF(NOT HAVE_OSTRSTREAM)




CONFIGURE_FILE(${CMAKE_CURRENT_BINARY_DIR}/SAMRAI_config.h.in
        ${CMAKE_CURRENT_BINARY_DIR}/include/SAMRAI/SAMRAI_config.h @ONLY)

SET(CMAKE_CXX_FLAGS "-fPIC -Wno-deprecated -Wpotentially-evaluated-expression")

SET(SAMRAI_INCLUDE_DIRS ${SAMRAI_BINARY_DIR}/include/ ${SAMRAI_SOURCE_DIR}/source/)
INCLUDE_DIRECTORIES(${SAMRAI_INCLUDE_DIRS}/)
MACRO(SUBDIRLIST result curdir)
    FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
    SET(dirlist "")
    FOREACH (child ${children})
        IF (EXISTS ${curdir}/${child}/Makefile.in)
            LIST(APPEND dirlist ${child})
        ENDIF ()
    ENDFOREACH ()
    SET(${result} ${dirlist})
ENDMACRO()


SUBDIRLIST(SUBDIRS ${CMAKE_CURRENT_LIST_DIR}/source/SAMRAI/)
FOREACH (subdir ${SUBDIRS})
    MESSAGE("Add sub directory: ${CMAKE_CURRENT_LIST_DIR}/source/SAMRAI/${subdir}")
    FILE(GLOB _SRC ${CMAKE_CURRENT_LIST_DIR}/source/SAMRAI/${subdir}/*.C)
    add_library(${subdir} ${_SRC})
ENDFOREACH ()