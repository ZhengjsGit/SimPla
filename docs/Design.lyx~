#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook-book
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman Adobe 仿宋 Std
\font_sans Adobe 楷体 Std
\font_typewriter Adobe 黑体 Std
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Revision
Rev.
 0.0.1
\end_layout

\begin_layout Title
SimPla 概要设计报告
\end_layout

\begin_layout Author
于 治 Salmon
\end_layout

\begin_layout Date
2012-8-1
\end_layout

\begin_layout Chapter
概述
\end_layout

\begin_layout Chapter
整体结构
\end_layout

\begin_layout Section
Conecpts
\end_layout

\begin_layout Subsection
container
\end_layout

\begin_layout Description
container A Container is an object used to store other objects and taking
 care of the management of the memory used by the objects it contains.
 -- http://en.cppreference.com/w/cpp/concept/Container
\end_layout

\begin_layout Code

template<typename TV,typename ...
 Others>
\end_layout

\begin_layout Code

struct Container { 	
\end_layout

\begin_layout Code

 
\end_layout

\begin_layout Code

 
\end_layout

\begin_layout Code

 
\end_layout

\begin_layout Code

	typedef TV value_type;
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	typedef Container<TV,Others...> this_type;
\end_layout

\begin_layout Code

	 
\end_layout

\begin_layout Code

	typedef typename mesh_type::iterator index_type;
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	typedef std::shared_ptr<value_type> container_type;
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	Container( );  
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	Container(this_type const & rhs); 
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	~Container();
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	template<typename TVistor>  void Accept(TVistor const & visitor); 
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	void swap(this_type & rhs); 	 
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	void Init();  
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	template<typename ...Args>  int GetDataSetShape(Args ...others) const  ;
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	container_type & data();
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	const container_type & data() const ;
\end_layout

\begin_layout Code

\end_layout

\begin_layout Code

	bool empty() const ;
\end_layout

\begin_layout Code

	 
\end_layout

\begin_layout Code

	inline value_type & at(index_type s) ; 
\end_layout

\begin_layout Code

	inline value_type const & at(index_type s) const  ;
\end_layout

\begin_layout Code

	inline value_type & get(index_type s) ;	 
\end_layout

\begin_layout Code

	inline value_type const & get(index_type s) const  ;
\end_layout

\begin_layout Code

	inline value_type & operator[](index_type s);	 
\end_layout

\begin_layout Code

	inline value_type const & operator[](index_type s) const  ;
\end_layout

\begin_layout Code

	template<typename ...
 Args>  auto Select(Args const & ...
 args);
\end_layout

\begin_layout Code

};
\end_layout

\begin_layout Section
SimPla体系结构
\end_layout

\begin_layout Section
对外接口 export
\end_layout

\begin_layout Section
支撑设计 import
\end_layout

\begin_layout Chapter
模块设计
\end_layout

\begin_layout Section
XXX模块设计
\end_layout

\begin_layout Subsection
模块数据结构
\end_layout

\begin_layout Subsection
接口
\end_layout

\begin_layout Subsection
测试
\end_layout

\begin_layout Subsubsection
单元测试
\end_layout

\begin_layout Enumerate
模块，函数
\end_layout

\begin_layout Subsubsection
接口功能测试
\end_layout

\begin_layout Chapter
运行
\end_layout

\begin_layout Chapter
整体测试
\end_layout

\begin_layout Enumerate
集成测试（组装测试）
\end_layout

\begin_deeper
\begin_layout Enumerate
模块调用
\end_layout

\begin_layout Enumerate
确认测试
\end_layout

\begin_deeper
\begin_layout Enumerate
性能、功能验证
\end_layout

\end_deeper
\end_deeper
\end_body
\end_document
