/*
 * select.h
 *
 *  Created on: 2014-12-2
 *      Author: salmon
 */

#ifndef CORE_MODEL_SELECT_H_
#define CORE_MODEL_SELECT_H_

#include <iterator>
#include <vector>
#include <algorithm>

#include "../toolbox/ntuple.h"
#include "../sp_def.h"
#include "../numeric/pointinpolygon.h"

namespace simpla
{

template<typename TPredFun, typename TOUT>
void filter(TPredFun const & pred, TOUT *res)
{
	res->erase(std::remove_if(std::begin(*res), std::end(*res), pred),
			std::end(*res));
}
template<typename TPredFun, typename TIN, typename TOUT>
void filter(TPredFun const & pred, TIN const & in, TOUT *res)
{
	std::copy_if(in.begin(), in.end(), std::inserter(*res, std::begin(*res)),
			pred);
}
template<typename TM, typename TIN, typename ... Args>
void select_vertics_in_polylines(TM const & mesh, TIN const & points, int ZAXIS,
		Args && ... args)
{
	PointInPolygon checkPointsInPolygen(points, ZAXIS);

	filter([&]( typename TM::id_type s)
	{
		return checkPointsInPolygen(mesh.coordinates(s));

	}, std::forward<Args>(args)...);
}

template<typename TM, typename ...Args>
void select_vertics_in_rectangle(TM const& mesh,
		typename TM::coordinates_type const & v0,
		typename TM::coordinates_type const & v1, Args && ...args)
{

	filter([&]( typename TM::id_type const &s)
	{
		auto x=mesh.coordinates(s);
		return ( (((v0[0] - x[0]) * (x[0] - v1[0])) >= 0)
				&& (((v0[1] - x[1]) * (x[1] - v1[1])) >= 0)
				&& (((v0[2] - x[2]) * (x[2] - v1[2])) >= 0));
	}, std::forward<Args>(args)...);

}

template<typename TM, typename ...Args>
void select_line_segment(TM const& mesh,
		typename TM::coordinates_type const & x0,
		typename TM::coordinates_type const & x1, Args && ...args)
{

	auto dx = mesh.dx();

	Real dl = inner_product(dx, dx);
	filter([=]( typename TM::coordinates_type const & x )->bool
	{	Real l2 = inner_product(x1 - x0, x1 - x0);

		Real t = inner_product(x - x0, x1 - x0) / l2;

		if (0 <= t && t <= 1)
		{
			nTuple<Real, 3> d;

			d = x - x0 - (t * (x1 - x0) + x0);
			return (inner_product(d, d) <= dl);
		}
		else
		{
			return false;
		}
	}, std::forward<Args>(args) ...);

}

template<typename TM, typename TRes>
void select_boudary_by_polylines(TM const & mesh,
		std::vector<typename TM::coordinates_type> const& g_points, int ZAXIS,
		TRes * res)
{
	std::vector<typename TM::coordinates_type> points;
	std::transform(std::begin(g_points), std::end(g_points),
			std::inserter(points, points.begin()),
			[&](typename TM::coordiantes_type const & x)
			{
				return std::move(mesh.coordiantes_to_topology(x));
			});
	/**
	 *  @note in the mesh space, dx=1
	 */
	int XAXIS = (ZAXIS + 1) % 3;
	int YAXIS = (ZAXIS + 2) % 3;
	ZAXIS = (ZAXIS + 0) % 3;

	auto first = points.begin();

	while (first != points.end())
	{
		auto second = first;
		++second;
		if (second == points.end())
		{
			second = points.begin();
		}
		typename TM::coordinates_type x0 = (*first);
		typename TM::coordinates_type x1 = (*second);

		Real angle = std::atan2(x1[YAXIS] - x0[YAXIS], x1[XAXIS] - x0[XAXIS]);

		size_t I0 = static_cast<size_t>(x0[XAXIS]) + 1;
		size_t J0 = static_cast<size_t>(x0[YAXIS]) + 1;
		size_t I1 = static_cast<size_t>(x1[XAXIS]) + 1;
		size_t J1 = static_cast<size_t>(x1[YAXIS]) + 1;

	}

	filter([&]( typename TM::coordinates_type const & x )->bool
	{
		auto first = points.begin();

		while (first != points.end())
		{
			auto second = first;

			++second;

			if (second == points.end())
			{
				second = points.begin();
			}

			auto x0=*first;

			auto x1=*second;

			++first;

			Real l2 = inner_product(x1 - x0, x1 - x0);

			Real t = inner_product(x - x0, x1 - x0) / l2;

			if (0 <= t && t <= 1)
			{
				nTuple<Real, 3> d;

				d = x - x0 - (t * (x1 - x0) + x0);

				if(inner_product(d, d) <= d2)
				{
					return checkPointsInPolygen(x) == is_inner;
				}
			}

		}

		return false;
	}, //
			std::forward<Args>(args) ...);
}

template<typename TM, typename TDict, typename ...Args>
void select_vertics_by_config(TM const& mesh, TDict const & dict,
		Args && ...args)
{

	if (dict.is_function())
	{
		filter([=]( typename TM::id_type const & s )->bool
		{
			return (dict(mesh.coordinates(s)).template as<bool>());
		}, std::forward<Args>(args)...);
	}
	else if (dict["Rectangle"])
	{
		std::vector<typename TM::coordinates_type> points;

		dict.as(&points);

		select_vertics_in_rectangle(mesh, points[0], points[1],
				std::forward<Args>(args)...);

	}
	else if (dict["Polyline"])
	{
		auto obj = dict["Polyline"];

		int ZAXIS = 0;

		std::vector<typename TM::coordinates_type> points;

		obj["ZAXIS"].as(&ZAXIS);

		obj["Points"].as(&points);

		if (obj["OnlyEdge"])
		{
			select_points(mesh, points, ZAXIS, std::forward<Args>(args)...);
		}
		else
		{
			select_vertics_in_points(mesh, points, ZAXIS,
					std::forward<Args>(args)...);
		}
	}

}
template<typename TM, typename TDict, typename ...Args>
void select_by_config(TM const& mesh, TDict const & dict, Args && ...args)
{

	switch (mesh.iform)
	{

	}
}

}
// namespace simpla

#endif /* CORE_MODEL_SELECT_H_ */
